// 🎧 ==== 音乐播放器逻辑 ==== //

const music = new Audio('audio/音乐.mp3'); // 加载背景音乐
let isPlaying = false;
let volumeLevel = 3; // 初始音量等级 1–5

// 获取控制元素
const toggleBtn = document.getElementById('music-toggle');
const volumeBars = document.querySelectorAll('.volume-bars .bar');
const currentTimeDisplay = document.getElementById('current-time');
const totalTimeDisplay = document.getElementById('total-time');
const progressBar = document.getElementById('progress-bar');

// ⏯️ 播放 / 暂停 控制
toggleBtn.addEventListener('click', () => {
  if (!isPlaying) {
    music.play();
    toggleBtn.textContent = '⏸';
  } else {
    music.pause();
    toggleBtn.textContent = '▶';
  }
  isPlaying = !isPlaying;
});

// 🔊 更新音量条样式与播放器音量值
function updateVolume(level) {
  volumeBars.forEach(bar => bar.classList.toggle('active', +bar.dataset.level <= level));
  music.volume = level / 5;
}
updateVolume(volumeLevel);

// ➕➖ 音量控制接口
window.increaseVolume = () => { if (volumeLevel < 5) updateVolume(++volumeLevel); };
window.decreaseVolume = () => { if (volumeLevel > 0) updateVolume(--volumeLevel); };

// 🔢 音乐元数据加载完成，初始化总时长与进度条最大值
music.addEventListener('loadedmetadata', () => {
  progressBar.max = Math.floor(music.duration);
  totalTimeDisplay.textContent = formatTime(music.duration);
});

// ⏱️ 播放进度更新时间，更新进度条与显示数字
music.addEventListener('timeupdate', () => {
  const cur = Math.floor(music.currentTime);
  progressBar.value = cur;
  currentTimeDisplay.textContent = formatTime(cur);
  const percent = (cur / music.duration) * 100;
  progressBar.style.background = `linear-gradient(to right, #f9c038 ${percent}%, #ccc ${percent}%)`;
});

// 🎚️ 拖动进度条跳转播放时间
progressBar.addEventListener('input', () => { music.currentTime = +progressBar.value; });

// 格式化时间为 mm:ss
function formatTime(sec) {
  return `${String(Math.floor(sec / 60)).padStart(2, '0')}:${String(Math.floor(sec % 60)).padStart(2, '0')}`;
}

// 🎬 ==== 作品集滚动逻辑 ==== //

const wrapper = document.getElementById('portfolio-scroll');
const items = wrapper.querySelectorAll('.portfolio-item');
let currentIndex = 0; // 初始为第一个作品

// 更新每个作品的样式状态（active/prev/next/hidden）
function updateCarousel() {
  items.forEach((item, i) => {
    item.classList.remove('active', 'prev', 'next');
    if (i === currentIndex) {
      item.classList.add('active');
    } else if (i === (currentIndex + items.length - 1) % items.length) {
      item.classList.add('prev');
    } else if (i === (currentIndex + 1) % items.length) {
      item.classList.add('next');
    }
  });
}

// 📌 滚动函数，通过参数 direction 控制左（-1）右（1）切换
window.scrollPortfolio = (direction) => {
  currentIndex = (currentIndex + direction + items.length) % items.length;
  updateCarousel();
};

// 📎 初始化：绑定点击事件与设置初始状态
items.forEach((item, idx) => {
  item.addEventListener('click', () => {
    // 跳转到对应详情页面，自行调整 URL 规则
    window.location.href = `detail.html?id=${idx + 1}`;
  });
});
updateCarousel(); // 首次加载时设置状态